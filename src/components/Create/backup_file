import React, { useState } from "react"
import "./Create.css"
// import { render } from "react-dom"
// import Cards from "src/components/Cards"
import { DragDropContext } from "react-beautiful-dnd"
import { Droppable } from "react-beautiful-dnd"
import { Draggable } from "react-beautiful-dnd"

// import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd"

// fake data
const cardsNames = {
  // Our dragable items
  lieux: {
    "lieu-1": { id: "0", content: "ForÃªt" },
    "lieu-2": { id: "1", content: "Desert" },
    "lieu-3": { id: "2", content: "Taverne" },
    "lieu-4": { id: "3", content: "Espace" },
  },
  // Column where the items are curently in
  columns: {
    "column-1": {
      id: "column-1",
      title: "select card",
      // We declare the ownership : lieu-1 is currently in column-1
      lieuIDs: ["lieu-1", "lieu-2", "lieu-3", "lieu-4"],
    },
    // We define the column order
    columnOrder: ["column-1"],
  },
}

const CreateChoice = () => {
  const [lieuState, setState] = useState(cardsNames)

  const onDragEnd = (result) => {
    // TODO reorder column

    const { destination, source, draggableId } = result

    if (!destination) {
      return
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return
    }

    const column = lieuState.columns[source.droppableId]
    const newLieuId = Array.from(column.lieuIDs)

    newLieuId.splice(source.index, 1)
    newLieuId.splice(destination.index, 0, draggableId)

    const newColumn = {
      ...column,
      lieuIDs: newLieuId,
    }

    const myState = {
      ...lieuState,
      columns: {
        ...lieuState.columns,
        [newColumn.id]: newColumn,
      },
    }

    setState(myState)

    console.log(myState)
  }

  const onDragStart = (result) => {
    // TODO reorder column
    console.log("onDragStart")
  }

  const cards = () => {
    return lieuState.columns.columnOrder.map((columnID) => {
      const column = lieuState.columns[columnID]
      const lieux = column.lieuIDs.map((lieuID) => lieuState.lieux[lieuID])
      return (
        <Droppable droppableId="column-1">
          {(provided) => (
            <div
              {...provided.droppableProps}
              ref={provided.innerRef}
              className="flex h-64"
            >
              {provided.placeholder}
              {lieux.map((lieu, index) => (
                <Draggable draggableId={lieu.id} key={lieu.id} index={index}>
                  {(provided, index) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      className="select-none w-48 h-64 rounded-lg bg-gray-800 mx-8 flex justify-center items-center text-white font-bold text-2xl ease-in-out duration-200 transform hover:-translate-y-3"
                    >
                      {lieu.content}
                    </div>
                  )}
                </Draggable>
              ))}
            </div>
          )}
        </Droppable>
      )
    })
  }
  return (
    <div className="DragDropContext Create bg-gray-300 shadow-lg  flex py-8 w-full ">
      <DragDropContext className="h-64" onDragEnd={onDragEnd}>
        {cards()}
      </DragDropContext>
    </div>
  )
}

export default CreateChoice
